' {$STAMP BS2}
' {$PBASIC 2.5}

PinConfig:
  PushButton PIN 0
  Potentiometer PIN 1
  Speaker PIN 2

  OctaveLow PIN 3
  OctaveHigh PIN 4

  OUTL = %00000000
  DIRL = %00011100

  OUTH = %00000000
  DIRH = %11111111

EEPROMData:
  SongAddress1     DATA    "Reveille:d=4,o=7,b=140:8g6,8c,16e,16c,8g6,8e,",
                           "8c,16e,16c,8g6,8e,8c,16e,16c,8a6,8c,e,8c,8g6,",
                           "8c,16e,16c,8g6,8e,8c,16e,16c,8g6,8e,8c,16e,",
                           "16c,8g6,8e,c,p,8e,8e,8e,8e,g,8e,8c,8e,8c,8e,8c,",
                           "e,8c,8e,8e,8e,8e,8e,g,8e,8c,8e,8c,8g6,8g6,c."
  SongAddress2     DATA    "Beethoven5:d=8,o=7,b=125:g,g,g,2d#,p,f,f,f,2d"
  SongAddress3     DATA    "TwinkleTwinkle:d=4,o=7,b=120:c,c,g,g,a,a,2g,f,",
                           "f,e,e,d,d,2c,g,g,f,f,e,e,2d,g,g,f,f,e,e,2d,c,c,",
                           "g,g,a,a,2g,f,f,e,e,d,d,1c"

  Done           DATA    ",q,"

  Notes          DATA     "p",       "a",       "#",       "b",
                          "c",       "#",       "d",       "#",
                          "e",       "f",       "#",       "g",
                          "#"
  Octave8        DATA    Word 0,    Word 3520, Word 3729, Word 3951,
                         Word 4186, Word 4435, Word 4699, Word 4978,
                         Word 5274, Word 5588, Word 5920, Word 6272,
                         Word 6645

  SongAddresses DATA Word SongAddress1, Word SongAddress2, Word SongAddress3

PlayerVarConfig:
  counter        VAR     Word                ' General purpose counter.
  char           VAR     Byte                ' Variable stores characters.
  index          VAR     Word                ' Index for pointing at data.

  noteLetter     VAR     Byte                ' Stores note character.
  noteFreq       VAR     Word                ' Stores note frequency.
  noteOctave     VAR     Word                ' Stores note octave.

  duration       VAR     Word                ' Stores note duration.
  tempo          VAR     Word                ' Stores tempo.

  default_d      VAR     Byte                ' Stores default duration.
  default_o      VAR     Byte                ' Stores default octave.
  default_b      VAR     Word                ' Stores default beats/min.

  potTimer VAR Word
  potTempo VAR Word

MainVarConfig:
  SongIndex VAR Nib
  SongIndex = 0

  SongAddress VAR Word
  SongAddress = 0

  SongEnd VAR Bit
  SongEnd = 0

  IsSharp VAR Bit
  IsSharp = 0

  CanSwitchSong VAR Bit
  CanSwitchSong = 1

  state VAR Nib
  state = 0

Main:
  DO
    IF state = 0 THEN
      GOSUB LoadSong
      state = 1
    ELSEIF state = 1 THEN
      IF PushButton = 0 THEN
        CanSwitchSong = 1
      ENDIF

      IF PushButton = 1 AND CanSwitchSong = 1 THEN
        CanSwitchSong = 0
        SongIndex = SongIndex + 1
        SongIndex = SongIndex // 5
        DEBUG "song idx = ", DEC SongIndex
        state = 0
      ELSE
        GOSUB PlayNextNote
        IF SongEnd = 1 THEN
          state = 0
        ENDIF
      ENDIF
    ENDIF
  LOOP

LoadSong:
  SongEnd = 0
  READ SongAddresses + (2 * SongIndex), Word SongAddress

  DEBUG "song address = ", DEC SongAddress

  counter = 0                                ' Initialize counter.

  GOSUB FindEquals                           ' Find first '=' in file.
  GOSUB ProcessDuration                      ' Get default duration.
  GOSUB FindEquals                           ' Find next '='.
  GOSUB ProcessOctave                        ' Get default octave.
  GOSUB FindEquals                           ' Find last '='.
  GOSUB GetTempo                             ' Get default tempo.
RETURN

PlayNextNote:
  IF char = "q" THEN
    SongEnd = 1
  ELSE
    GOSUB GetPotentiometerTempo
    GOSUB ProcessDuration                    ' Get note duration.
    GOSUB ProcessNote                        ' Get index value of note.
    GOSUB CheckForDot                        ' If dot, 3/2 duration.
    GOSUB ProcessOctave                      ' Get octave.
    GOSUB PlayNote                           ' Get freq, play note, next.
  ENDIF
RETURN

' -----[ Subroutine - Find Equals Character ]-----------------------------

FindEquals:                                ' Go through characters in RTTTL file looking for
  DO                                       ' '='.  Increment counter
    READ SongAddress + counter, char        ' until '=' is found, then
    counter = counter + 1                  ' return.
  LOOP UNTIL char = "="
RETURN

' -----[ Subroutine - Determine Note Duration ]---------------------------

  ProcessDuration:                           ' Check to see if characters
                                             ' form 1, 2, 4, 8, 16 or 32.
    READ SongAddress + counter, char          ' If yes, then convert from
                                             ' ASCII character to a value
    SELECT char                              ' by subtracting 48. In the
      CASE "1", "2", "3", "4", "8"           ' case of 16 or 32, multiply
        duration = char - 48                 ' by 10 and add the next
        counter = counter + 1                ' digit to the ones column.
        READ SongAddress + counter, char
        SELECT char
          CASE "6", "2"
            duration = duration * 10 + char - 48
            counter = counter + 1
        ENDSELECT
        CASE ELSE                            ' If no duration, use
        duration = default_d                 ' use default.
    ENDSELECT

    IF default_d <> 0 THEN                   ' If default_d not defined
      duration = 60000/potTempo/duration*3  ' (if default_d = 0), then
    ELSE                                     ' set default_d = to the
      default_d = duration                   ' duration from the d=#.
    ENDIF

    RETURN

' -----[ Subroutine - Look up Octave ]------------------------------------

  ProcessOctave:                             ' Octave may or may not be
                                             ' included in a given note
    READ SongAddress + counter, char          ' because any note that is
    SELECT char                              ' played in the default
      CASE "5" TO "8"                        ' octave does not specify
        noteOctave = char - "0"              ' the octave.  If a char
        counter = counter + 1                ' from '5' to '8' then use
      CASE ELSE                              ' it, else use default_o.
        noteOctave = default_o               ' Characters are converted
    ENDSELECT                                ' to digits by subtracting
    IF default_o = 0 THEN                    ' '0', which is the same as
      default_o = noteOctave                 ' subtracting 48. The first
    ENDIF                                    ' time this subroutine is
                                             ' called, default_o is 0.
    RETURN                                   ' If 0, then set default_o.

' -----[ Subroutine - Read Tempo from RTTTL Header ]----------------------
' Each keyboard character has a unique number called an ASCII value.
' The characters 0, 1, 2,...9 have ASCII values of 48, 49, 50,...57.
' You can always convert from the character representing a digit to
' to its value by subtracting 48 from the variable storing the digit.
' You can examine this by comparing DEBUG DEC 49 and DEBUG 49.

  GetTempo:                                  ' Parse RTTTL file for Tempo.
                                             ' Convert characters to
    default_b = 0                            ' digits by subtracting 48
    DO                                       ' from each character's ASCII
      READ SongAddress + counter, char       ' value.  Iteratively multiply
      IF char = ":" THEN                     ' each digit by 10 if there
        default_b = default_b / 10           ' is another digit, then add
        counter = counter + 1                ' the most recent digit to
        EXIT                                 ' one's column.
      ENDIF                                  ' For example, the string
        default_b = default_b + char - 48    ' "120" is (1 X 10 X 10)
        counter = counter + 1                ' + (2 X 10) + 0.  The '1'
        default_b = default_b * 10           ' is converted first, then
    LOOP UNTIL char = ":"                    ' multiplied by 10.  The '2'
                                             ' is then converted/added.
    RETURN                                   ' 0 is converted/added, done.

GetPotentiometerTempo:
  HIGH Potentiometer
  PAUSE 5
  RCTIME Potentiometer, 1, potTimer
  potTempo = (potTimer - 1) / 8
  potTempo = (potTempo * ((4*default_b) - (default_b */ 64)))
  DEBUG "pot tempo: ", DEC potTempo, CR
  potTempo = potTempo / 80
  DEBUG "pot tempo: ", DEC potTempo, CR
  potTempo = potTempo + (default_b */ 64)
  ' Adjust
  DEBUG "pot tempo: ", DEC potTempo, CR, CR
RETURN

' -----[ Subroutine - Find Index of Note ]--------------------------------

  ProcessNote:                               ' Set index value for lookup
                                             ' of note frequency based on
    READ SongAddress + counter, char          ' note character. If 'p',
    SELECT char                              ' index is 0.  If 'a' to 'g',
      CASE "p"                               ' read character values in
        index = 0                            ' DATA table and find match.
        counter = counter + 1                ' Record index value when
      CASE "a" TO "g"                        ' match is found.  If next
        FOR index = 1 TO 12                  ' char is a sharp (#), add
          READ Notes + index, noteLetter     ' 1 to the index value to
          IF noteLetter = char THEN EXIT     ' increase the index (and
        NEXT                                 ' frequency) by 1 notch.
        counter = counter + 1                ' As with other subroutines,
        READ SongAddress + counter, char      ' increment counter for each
        IF char = "#" THEN                         ' character that is processed.
          index = index + 1
          counter = counter + 1
          IsSharp = 1
        ELSE
          IsSharp = 0
        ENDIF
    ENDSELECT

    RETURN

' -----[ Subroutine - Check For '.' Indicating 1.5 Duration ]-------------

  CheckForDot:                               ' Check for dot indicating
                                             ' multiply duration by 3/2.
    READ SongAddress + counter, char          ' If dot found, multiply by
    SELECT char                              ' 3/2 and increment counter,
      CASE "."                               ' else, do nothing and
        duration = duration * 3 / 2          ' return.
        counter = counter + 1
    ENDSELECT

    RETURN

' -----[ Subroutine - Find Comma and Play Note/Duration ]-----------------

  PlayNote:                                  ' Find last comma in the
                                             ' current note entry.  Then,
    READ SongAddress + counter, char          ' fetch the note frequency
    SELECT char                              ' from data, and play it, or
      CASE ","                               ' pause if frequency = 0.
        GOSUB UpdateDisplay
        counter = counter + 1
        READ Octave8 + (index * 2), Word noteFreq
        noteOctave = 8 - noteOctave
        noteFreq = noteFreq / (DCD noteOctave)
        IF noteFreq = 0 THEN
           PAUSE duration
        ELSE
          FREQOUT Speaker, duration, noteFreq
        ENDIF
    ENDSELECT

    RETURN

UpdateDisplay:
  SELECT noteLetter
    CASE "p"
      OUTH = %00000000
    CASE "a"
      OUTH = %11100001
    CASE "b"
      OUTH = %11100011
    CASE "c"
      OUTH = %01100011
    CASE "d"
      OUTH = %11100111
    CASE "e"
      OUTH = %01110011
    CASE "f"
      OUTH = %01110001
  ENDSELECT
  IF IsSharp = 1 THEN
    HIGH 11
  ELSE
    LOW 11
  ENDIF

  SELECT noteOctave
    CASE 5
      LOW OctaveLow
      LOW OctaveHigh
    CASE 6
      HIGH OctaveLow
      LOW OctaveHigh
    CASE 7
      LOW OctaveLow
      HIGH OctaveHigh
    CASE 8
      HIGH OctaveLow
      HIGH OctaveHigh
  ENDSELECT
RETURN